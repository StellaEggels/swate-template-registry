@page "/templates"
@inject IDbContextFactory<SwateTemplateDb> SwateTemplateDbContextFactory
@rendermode InteractiveServer

<h1>All available Swate templates</h1>

@if (TemplateSummaries == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <input @bind="searchTerm" @bind:event="oninput" placeholder="Search by name" />
    <details class="dropdown">
        <summary>
            Communities
        </summary>
        <ul>
            <li>
                <label>
                    <input type="checkbox" id="All Communities" @onchange="ToggleAllOrganisations"
                           checked="@areAllCommunitiesSelected" />
                    All Communities
                </label>
            </li>
            @foreach (var org in DistinctOrganisations)
            {
                <li>
                    <label>
                        <input type="checkbox" id="@org" @onchange="() => ToggleOrganisation(org)"
                               checked="@SelectedOrganisations.Contains(org)"/>
                        @org
                    </label>
                </li>
            }
        </ul>
    </details>

    <div class="overflow-auto">
        <table class="table">
            <thead>
                <tr>
                    <th scope="col">Name</th>
                    <th scope="col">Description</th>
                    <th scope="col">Latest stable version</th>
                    <th scope="col">Release date</th>
                    <th scope="col">Tags</th>
                    <th scope="col">Total Downloads</th>
                    <th scope="col">Id</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var templateSummary in FilteredTemplates)
                {
                    <TemplateSummaryRow summary="@templateSummary"></TemplateSummaryRow>
                }
            </tbody>
        </table>
    </div>
}

@code
{
    ///  <summary>
    /// This is the collection of all templates from the database.
    /// </summary>
    private TemplateSummary[]? TemplateSummaries;
    /// <summary>
    /// search string in input field
    /// </summary>
    private string searchTerm = string.Empty;
    private HashSet<string> SelectedOrganisations = new() { "DataPLANT" };

    private bool areAllCommunitiesSelected => SelectedOrganisations.Count == 0;

    private bool IsDropdownOpen = false;

    private void ToggleDropDown()
    {
        IsDropdownOpen = !IsDropdownOpen;
    }

    private void ToggleAllOrganisations()
    {
        ToggleOrganisation("All Communities");
    }

    private TemplateSummary[] FilteredTemplatesByName => string.IsNullOrWhiteSpace(searchTerm)
        ? TemplateSummaries
        : TemplateSummaries?.Where(r => r.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
        .ToArray();

    private string[] DistinctOrganisations => TemplateSummaries
        .Select(t => t.Organisation)
        .Where(org => !string.IsNullOrWhiteSpace(org))
        .Distinct(StringComparer.OrdinalIgnoreCase)
        .OrderBy(org => org)
        .ToArray();

    private TemplateSummary[] FilteredTemplates =>
        FilteredTemplatesByName
            .Where(t => SelectedOrganisations.Count == 0
                        || t.Organisation != null && SelectedOrganisations.Contains(t.Organisation))
        .ToArray();

    private void ToggleOrganisation(string org)
    {
        if (SelectedOrganisations.Contains(org))
        {
            SelectedOrganisations.Remove(org);
        }
        else if (org == "All Communities")
        {
            SelectedOrganisations.Clear();
        }
        else
        {
            SelectedOrganisations.Add(org);
        }
    }

    private void ClearCommunities()
    {
        SelectedOrganisations.Clear();
    }

    protected override async Task OnInitializedAsync()
    {
        using var database = await SwateTemplateDbContextFactory.CreateDbContextAsync();
        var metadata = await database.Metadata.ToArrayAsync();
        var templates = await database.Templates.ToArrayAsync();

        var latestTemplates =
            metadata
            .OrderByDescending(p => p.MajorVersion)
            .ThenByDescending(p => p.MinorVersion)
            .ThenByDescending(p => p.PatchVersion)
            .FirstOrDefault();

        var templateSummaries =
            metadata
                .GroupBy(p => p.Id)
                .ToList()
                .Select(group =>
                    {
                        var downloads =
                            database.Downloads
                            .Where(p => p.TemplateId == group.Key)
                            .Sum(d => d.DownloadCount);

                        var latestTemplate =
                            group
                                .Where(p => p.BuildMetadataVersionSuffix == "" && p.BuildMetadataVersionSuffix == "")
                                .OrderByDescending(p => p.MajorVersion)
                                .ThenByDescending(p => p.MinorVersion)
                                .ThenByDescending(p => p.PatchVersion)
                                .FirstOrDefault();

                        return new TemplateSummary
                        {
                            Id = group.Key,
                            Name = latestTemplate.Name,
                            Description = latestTemplate.Description,
                            Tags = (latestTemplate?.Tags ?? []).Select(t => t.Name).ToArray(),
                            ReleaseDate = latestTemplate.ReleaseDate,
                            LatestVersion = latestTemplate.GetSemanticVersionString(),
                            TotalDownloads = downloads,
                            Organisation = latestTemplate.Organisation
                        };
                    }
                )
                .OrderBy(r => r.Name)
                .ToArray();

        TemplateSummaries = templateSummaries;
    }
}
